name: CI Pipeline

on:
  push:
    branches:
      - main   

permissions:
  contents: read
  security-events: write      

jobs:

  gitleaks_scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Gitleaks
      run: |
        sudo apt-get update
        sudo apt-get install -y gitleaks 

    - name: Run Gitleaks Scan
      run: |
        gitleaks detect --source ./spring-boot-app --report-path gitleaks-report.json --exit-code 1
        if [ $? -ne 0 ]; then
          echo "Gitleaks found issues. Please review the report."
          exit 1
        else
          echo "Gitleaks scan completed successfully. No issues found."
        fi

    - name: Upload Gitleaks Report
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json

  dockerfile_security_check:
    needs: gitleaks_scan
    name: Dockerfile Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile for secure USER usage
        run: |
          chmod +x spring-boot-app/dockerfile-check.sh
          ./spring-boot-app/dockerfile-check.sh

  build_maven_app:
    needs: dockerfile_security_check
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        java-version: [17]
        

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java-version }}
        cache: 'maven'
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

    - name: Build with Maven
      run: |
       mvn -B package --file spring-boot-app/pom.xml
       ls -l spring-boot-app/target

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: spring-boot-app/target/

  sonar_cloud_scan:
    needs: build_maven_app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: spring-boot-app/target/

      - name: Display structure of downloaded files
        run: ls -l spring-boot-app/target/

      - name: Sonar Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: spring-boot-app
          args: >
            -Dsonar.organization=${{ vars.SONAR_ORG }}
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectVersion=${{ vars.PROJECT_VERSION }}
            -Dsonar.java.binaries=target/classes
            -Dsonar.verbose=false 
            -Dsonar.host.url=${{ vars.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}     
  
  docker_build_scan_and_push:
    needs: sonar_cloud_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: spring-boot-app/target/

      - name: Build Docker image and scan with Trivy
        uses: docker/build-push-action@v6
        with:
          context: .
          file: spring-boot-app/Dockerfile.dev
          push: false
          load: true  
          tags: colanta06/java-app:${{ env.SHORT_SHA }}

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: v0.61.0

      - name: Run Trivy image scan (HTML report)
        run: |
          trivy image \
            --format table \
            --output trivy-report.html \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --ignore-unfixed \
            colanta06/java-app:${{ env.SHORT_SHA }}

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html

      - name: Push Docker image (if scan passed)
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: spring-boot-app/
          file: spring-boot-app/Dockerfile.dev
          push: true
          tags: colanta06/java-app:${{ env.SHORT_SHA }}


  upload_trivy_report_to_s3:
    needs: docker_build_scan_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Trivy report artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
      - name: Display structure of downloaded files
        run: ls -l   

