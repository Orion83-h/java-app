name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  security-events: write    

jobs:
  git_leaks_scan:
    name: Checkout code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
   
      - name: Install GitLeaks
        run: |
          sudo apt-get install -y gitleaks

      - name: Verify GitLeaks version
        run: gitleaks version
  
      - name: Run GitLeaks
        run: |
          gitleaks detect --source spring-boot-app/ --report-format sarif --report-path gitleaks.sarif

      - name: Upload GitLeaks SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  dockerfile_security_check:
    needs: git_leaks_scan
    name: Dockerfile Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile for secure USER usage
        run: |
          DOCKERFILE="spring-boot-app/Dockerfile.dev"
          if [ ! -f "$DOCKERFILE" ]; then
              echo "::error ::Dockerfile not found at path $DOCKERFILE"
              exit 1
          fi

          if grep -q '^FROM scratch' "$DOCKERFILE"; then
              echo "::error ::Avoid using FROM scratch unless absolutely necessary"
              exit 1
          fi

          if ! grep -q '^USER ' "$DOCKERFILE"; then
              echo "::error ::Dockerfile does not define a USER — container will run as root"
              exit 1
          fi

          USER_LINE=$(grep '^USER ' "$DOCKERFILE" | tail -n1)
          USER_VALUE=$(echo "$USER_LINE" | awk '{print $2}')
          if [ "$USER_VALUE" = "root" ]; then
              echo "::error ::Dockerfile sets USER to root — define a non-root user"
              exit 1
          fi

          echo " Dockerfile defines a secure non-root user: $USER_VALUE"        

  build_spring_boot_app:
    needs: dockerfile_security_check
    name: Build Spring Boot App
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package --file spring-boot-app/pom.xml

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: spring-boot-app/target

  sonar_cloud_scan:
    needs: build_spring_boot_app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: spring-boot-app/target

      - name: Display structure of downloaded files
        run: ls -l spring-boot-app/target

      - name: Sonar Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: spring-boot-app
          args: >
            -Dsonar.organization=${{ vars.SONAR_ORG }}
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectVersion=${{ vars.PROJECT_VERSION }}
            -Dsonar.java.binaries=target/classes
            -Dsonar.verbose=false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  install_docker_buildx:
    needs: sonar_cloud_scan
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

  docker_actions:
    needs: install_docker_buildx
    runs-on: ubuntu-latest
    steps:
    - 
      name: Checkout code
      uses: actions/checkout@v4
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - 
      name: Set short SHA
      id: vars
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - uses: actions/download-artifact@v4
      with:
        name: spring-boot-app
        path: spring-boot-app/target
    - 
      name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: spring-boot-app/target
        file: spring-boot-app/Dockerfile.dev
        push: true
        tags: colanta06/java-app:${{ env.SHORT_SHA }}
         
         
