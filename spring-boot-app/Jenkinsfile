pipeline {
    agent any

    tools {
        maven 'maven3'
    }
    
    parameters {
        string(name: 'BUILD_NUM_TO_KEEP', defaultValue: '-1', description: 'Keep all builds based on the number')
        string(name: 'BUILD_DAYS_TO_KEEP', defaultValue: '7', description: 'Discard builds older than 7 days')
        string(name: 'BUILD_ARTIFACT_NUM_TO_KEEP', defaultValue: '-1', description: 'Keep artifacts for all builds based on the number')
        string(name: 'BUILD_ARTIFACT_DAYS_TO_KEEP', defaultValue: '2', description: 'Discard artifacts older than 2 days')
        string(name: 'CONTAINER_PORT', defaultValue: '8080', description: 'Port to expose on the container')
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Deployment environment')
        choice(name: 'TRIVY_SEVERITY', choices: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'], description: 'Severity levels for Trivy to check')
        string(name: 'HOST_PORT', defaultValue: '8080', description: 'Port to use for the application during smoke test')
        booleanParam(name: 'FAIL_ON_VULNERABILITIES', defaultValue: true, description: 'Fail the build if vulnerabilities are found')
    }

    options {
        buildDiscarder(logRotator(
            numToKeepStr: params.BUILD_NUM_TO_KEEP,
            daysToKeepStr: params.BUILD_DAYS_TO_KEEP,
            artifactNumToKeepStr: params.BUILD_ARTIFACT_NUM_TO_KEEP,
            artifactDaysToKeepStr: params.BUILD_ARTIFACT_DAYS_TO_KEEP
        ))
        quietPeriod(30)
        timestamps()
    }
    
    environment {
        GIT_URL = 'https://github.com/Orion83-h/java-app.git'
        GIT_CREDS = 'gitAuth'
        GHCR_USERNAME = 'Orion83-h'
        DOCKERFILE = 'spring-boot-app/Dockerfile.dev'
        IMAGE_NAME = "colanta06/${env.JOB_NAME}:v${env.BUILD_NUMBER}"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'java-app'
        SONAR_ORG = 'hologram'
        SONAR_PROJECT_KEY = 'hologram_springapp'
        TRIVY_CACHE_DIR = '/tmp/trivy'
        TRIVY_SCAN_STATUS = '0'
    }

    stages {
        stage('Pull Src Code') {
            steps {
                echo "====++++Pulling Source Code From Repo++++===="
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH_NAME}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'PruneStaleBranch'],
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
                    ],
                    userRemoteConfigs: [[credentialsId: env.GIT_CREDS, url: env.GIT_URL]]
                ])
            }
        }

        stage('Secrets Scan (Gitleaks)') {
            steps {
                script {
                    echo "====++++Running Gitleaks for Secrets Scanning++++===="
                    sh """
                        mkdir -p gitleaks-reports
                        gitleaks detect --source spring-boot-app \
                                        --report-format sarif \
                                        --report-path gitleaks-reports/gitleaks-report.sarif
                    """
                    archiveArtifacts artifacts: 'gitleaks-reports/**', fingerprint: true

                    def result = sh(script: "gitleaks detect --source spring-boot-app --exit-code 1", returnStatus: true)
                    if (result != 0 && params.FAIL_ON_VULNERABILITIES) {
                        error("Secrets detected by Gitleaks!")
                    } else {
                        echo "No secrets detected by Gitleaks."
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                echo "====++++Building Maven Project++++===="
                sh 'cd spring-boot-app && mvn clean package'
                sh 'ls -ltr spring-boot-app/target'
            }
        }

        stage('SonarCloud Analysis') {
            steps {
                echo "====++++Sonar Code Quality++++===="
                withSonarQubeEnv('SonarCloud') {
                    script {
                        def SCANNER_HOME = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        try {
                            sh """
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.organization=$SONAR_ORG \
                                -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                                -Dsonar.java.binaries=spring-boot-app/target
                            """
                        } catch (Exception e) {
                            error "Unexpected error during SonarQube analysis: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Check Dockerfile') {
            steps {
                echo "====++++Checking Dockerfile++++===="
                script {
                    if (fileExists(env.DOCKERFILE)) {
                        echo "Dockerfile exists at path: ${env.DOCKERFILE}"
                    } else {
                        error "Dockerfile does not exist at path: ${env.DOCKERFILE}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "====++++Building Docker Image++++===="
                script {
                    sh """
                        docker build \
                        --no-cache \
                        --pull \
                        -t ${env.IMAGE_NAME} \
                        -f ${env.DOCKERFILE} .
                    """
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                echo "====++++Scanning Docker Image with Trivy++++===="
                script {
                    def reportDir = "trivy-reports"
                    sh "mkdir -p ${reportDir} ${env.TRIVY_CACHE_DIR}"

                    retry(3) {
                        sh 'trivy image --download-db-only || echo "Database download failed; retrying..."'
                    }

                    sh """
                        if [ ! -f contrib/html.tpl ]; then
                            mkdir -p contrib
                            wget -O contrib/html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
                        fi
                    """

                    try {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'gitAuth',
                                usernameVariable: 'GHCR_USERNAME',
                                passwordVariable: 'GHCR_TOKEN'
                            )
                        ]) {
                            env.TRIVY_SCAN_STATUS = sh(
                                script: """
                                    trivy image \
                                    --exit-code 1 \
                                    --cache-dir ${env.TRIVY_CACHE_DIR} \
                                    --severity ${params.TRIVY_SEVERITY} \
                                    --no-progress \
                                    --format template \
                                    --template contrib/html.tpl \
                                    --output ${reportDir}/trivy-report.html \
                                    ${env.IMAGE_NAME}
                                """,
                                returnStatus: true
                            ).toString()
                        }

                        if (fileExists("${reportDir}/trivy-report.html")) {
                            archiveArtifacts artifacts: "${reportDir}/trivy-report.html", fingerprint: true
                        }

                        if (env.TRIVY_SCAN_STATUS.toInteger() != 0 && params.FAIL_ON_VULNERABILITIES) {
                            error "Trivy scan found vulnerabilities!"
                        }
                    } catch (Exception e) {
                        unstable "Trivy scan encountered an error: ${e.getMessage()}"
                    }
                }
            }
        }

       stage('Push Docker Image') {
            when {
                expression { env.TRIVY_SCAN_STATUS == '0' }
            }
            steps {
                echo "====++++Pushing Docker Image to Registry++++===="
                script {
                    def dockerRegistryUrl = 'https://index.docker.io/v1/' // Example: Docker Hub
                    withDockerRegistry([credentialsId: 'dockerId', url: dockerRegistryUrl]) {
                        sh "docker push ${env.IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                echo "====++++Executing Smoke Test++++===="
                script {
                    def hostPort = params.HOST_PORT.toInteger()
                    sh """
                        docker run --name ${env.CONTAINER_NAME} \
                            -d \
                            -p ${hostPort}:${params.CONTAINER_PORT} \
                            ${env.IMAGE_NAME}
                    """
                    sh "chmod +x ${WORKSPACE}/spring-boot-app/check.sh"
                    sh """
                        sleep 30
                        APP_PORT=${hostPort} ${WORKSPACE}/spring-boot-app/check.sh
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo "====++++Cleaning up++++===="
                script {
                    sh """
                        docker stop ${env.CONTAINER_NAME} || true
                        docker rm -f ${env.CONTAINER_NAME} || true
                        docker rmi -f ${env.IMAGE_NAME} || true
                        docker image prune -f
                        docker container prune -f
                        rm -rf ${env.TRIVY_CACHE_DIR} || true
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                def reportUrl = "${env.BUILD_URL}artifact/trivy-reports/trivy-report.html"

                build job: 'helm-chart-update', 
                    parameters: [
                        string(name: 'IMAGE_NAME', value: "${env.IMAGE_NAME}"),
                        string(name: 'IMAGE_TAG', value: "${env.IMAGE_TAG}"),
                        string(name: 'ENVIRONMENT', value: "${params.ENVIRONMENT}")
                    ]

                emailext (
                    to: 'samuelhaddison71@gmail.com',
                    subject: "SUCCESS: ${env.JOB_NAME} - Build ${env.BUILD_NUMBER}",
                    body: """
                        <h2>Build Succeeded</h2>
                        <p>Job: ${env.JOB_NAME}</p>
                        <p>Build Number: ${env.BUILD_NUMBER}</p>
                        <p>Environment: ${params.ENVIRONMENT}</p>
                        <p>Trivy Scan Report: <a href="${reportUrl}">View Report</a></p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-reports/**'
                )
            }
        }
        failure {
            script {
                def reportUrl = "${env.BUILD_URL}artifact/trivy-reports/trivy-report.html"
                emailext (
                    to: 'samuelhaddison71@gmail.com',
                    subject: "FAILED: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                    body: """
                        <h2>Build Failed</h2>
                        <p>Job: ${env.JOB_NAME}</p>
                        <p>Build Number: ${env.BUILD_NUMBER}</p>
                        <p>Failed Stage: ${currentBuild.result}</p>
                        <p>Trivy Scan Report: <a href="${reportUrl}">View Report</a></p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-reports/**'
                )
            }
        }
        always {
            cleanWs(
                cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true
            )
        }
    }
}
